{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Godspeed Workflow Delaration",
  "description": "A recipe for Godspeed workflow.",
  "type": "object",
  "additionalProperties": false,
  "properties": {
    "id": {
      "$ref": "#/definitions/id"
    },
    "description": {
      "$ref": "#/definitions/description"
    },
    "summary": {
      "$ref": "#/definitions/summary"
    },
    "tasks": {
      "$ref": "#/definitions/tasks"
    },
    "on_error": {
      "$ref": "#/definitions/on_error"
    },
    "retry": {
      "$ref": "#/definitions/retry"
    },
    "additionalProperties": {
      "$ref": "#/definitions/additionalProperties"
    }
  },
  "required": ["id", "tasks"],
  "definitions": {
    "id": {
      "type": "string",
      "title": "ID",
      "description": "Unique ID for the workflow, It is recommanded for better logging visibility.",
      "default": "unique_id",
      "maxLength": 10,
      "minLength": 1,
      "pattern": "^[^\\s]+$"
    },
    "description": {
      "type": "string",
      "title": "Description",
      "description": "Detail description of workflow",
      "default": "detailed description of workflow",
      "maxLength": 20,
      "minLength": 2
    },
    "summary": {
      "type": "string",
      "title": "Title",
      "description": "Title of the workflow, meta info about the workflow",
      "default": "short summary of the workflow",
      "maxLength": 20,
      "minLength": 2
    },
    "additionalProperties": {
      "type": "boolean",
      "default": false
    },
    "fn": {
      "type": "string",
      "oneOf": [
        {
          "const": "com.gs.datastore",
          "title": "com.gs.datastore",
          "description": "This function will help you access Prisma datastore."
        },
        {
          "const": "com.gs.http",
          "title": "com.gs.http",
          "description": "Call a third party api, or other microservices"
        },
        {
          "const": "com.gs.return",
          "title": "com.gs.return",
          "description": "Return the arguments and end the task."
        },
        {
          "const": "com.gs.log",
          "title": "com.gs.log",
          "description": "Log the arguments to console."
        },
        {
          "const": "com.gs.transform",
          "title": "com.gs.transform",
          "description": "This function allows to transform data from one format to another using coffee/js scripting."
        },
        {
          "const": "com.gs.series",
          "title": "com.gs.series",
          "description": "Executes the tasks in series."
        },
        {
          "const": "com.gs.parallel",
          "title": "com.gs.parallel",
          "description": "Executes the tasks in parallel."
        },
        {
          "const": "com.gs.switch",
          "title": "com.gs.switch",
          "description": "The classic switch-case flow execution."
        },
        {
          "const": "com.gs.each_sequential",
          "title": "com.gs.each_sequential",
          "description": "The classic for-each flow execution"
        },
        {
          "const": "com.gs.each_parallel",
          "title": "com.gs.each_parallel",
          "description": "The args is list of values in `value` field along with associated tasks. For each value in `value` tasks are executed in parallel. The final output each_parallel is the array of status of the last executed task of each iteration."
        },
        {
          "const": "com.gs.if",
          "title": "com.gs.if",
          "description": "The args are `condition` and `tasks`. `condition` takes a coffee/js expression to be evaluated during runtime. The `tasks` can invoke another function or a workflow."
        },
        {
          "const": "com.gs.elif",
          "title": "com.gs.elif",
          "description": "The args are `condition` and `tasks`. `condition` takes a coffee/js expression to be evaluated during runtime. The `tasks` can invoke another function or a workflow."
        },
        {
          "const": "com.gs.else",
          "title": "com.gs.else",
          "description": "The args are `condition` and `tasks`. `condition` takes a coffee/js expression to be evaluated during runtime. The `tasks` can invoke another function or a workflow."
        },
        {
          "const": "com.gs.redis",
          "title": "com.gs.redis",
          "description": "To access redis datastore."
        }
      ]
    },
    "tasks": {
      "type": "array",
      "title": "Tasks",
      "description": "The tasks (workflows or sub-workflows) to be run in series (sequence, or one by one). The tasks invoke other workflows written in YAML or JS/TS. \n Default value is `sequence`",
      "items": {
        "$ref": "#/definitions/task"
      },
      "minItems": 1
    },
    "task": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "id": {
          "$ref": "#/definitions/id"
        },
        "description": {
          "$ref": "#/definitions/description"
        },
        "fn": {
          "$ref": "#/definitions/fn"
        },
        "on_error": {
          "$ref": "#/definitions/on_error"
        },
        "args": true,
        "params": true,
        "retry": true,
        "tasks": true,
        "value": true,
        "cases": true,
        "condition": true
      },
      "required": ["id", "fn"],
      "allOf": [
        {
          "if": {
            "properties": {
              "fn": {
                "const": "com.gs.return"
              }
            },
            "required": ["fn"]
          },
          "then": {
            "$ref": "#/definitions/com-gs-return"
          }
        },
        {
          "if": {
            "properties": {
              "fn": {
                "const": "com.gs.log"
              }
            },
            "required": ["fn"]
          },
          "then": {
            "$ref": "#/definitions/com-gs-log"
          }
        },
        {
          "if": {
            "properties": {
              "fn": {
                "const": "com.gs.transform"
              }
            },
            "required": ["fn"]
          },
          "then": {
            "$ref": "#/definitions/com-gs-transform"
          }
        },
        {
          "if": {
            "properties": {
              "fn": {
                "const": "com.gs.series"
              }
            },
            "required": ["fn"]
          },
          "then": {
            "$ref": "#/definitions/com-gs-series-and-parallel"
          }
        },
        {
          "if": {
            "properties": {
              "fn": {
                "const": "com.gs.parallel"
              }
            },
            "required": ["fn"]
          },
          "then": {
            "$ref": "#/definitions/com-gs-series-and-parallel"
          }
        },
        {
          "if": {
            "properties": {
              "fn": { "const": "com.gs.switch" }
            },
            "required": ["fn"]
          },
          "then": {
            "$ref": "#/definitions/com-gs-switch"
          }
        },
        {
          "if": {
            "properties": {
              "fn": {
                "const": "com.gs.each_sequential"
              }
            },
            "required": ["fn"]
          },
          "then": {
            "$ref": "#/definitions/com-gs-each_sequential_and_parallel"
          }
        },
        {
          "if": {
            "properties": {
              "fn": {
                "const": "com.gs.each_parallel"
              }
            },
            "required": ["fn"]
          },
          "then": {
            "$ref": "#/definitions/com-gs-each_sequential_and_parallel"
          }
        },
        {
          "if": {
            "properties": {
              "fn": {
                "const": "com.gs.if"
              }
            },
            "required": ["fn"]
          },
          "then": {
            "$ref": "#/definitions/com-gs-if-elif"
          }
        },
        {
          "if": {
            "properties": {
              "fn": {
                "const": "com.gs.elif"
              }
            },
            "required": ["fn"]
          },
          "then": {
            "$ref": "#/definitions/com-gs-if-elif"
          }
        },
        {
          "if": {
            "properties": {
              "fn": {
                "const": "com.gs.else"
              }
            },
            "required": ["fn"]
          },
          "then": {
            "$ref": "#/definitions/com-gs-else"
          }
        },
        {
          "if": {
            "properties": {
              "fn": { "const": "com.gs.redis" }
            },
            "required": ["fn"]
          },
          "then": {
            "$ref": "#/definitions/com-gs-redis"
          }
        },
        {
          "if": {
            "properties": {
              "fn": { "const": "com.gs.datastore" }
            },
            "required": ["fn"]
          },
          "then": {
            "$ref": "#/definitions/com-gs-datastore"
          }
        }
      ]
    },
    "on_error": {
      "type": "object",
      "properties": {
        "continue": {
          "type": "boolean",
          "default": true,
          "title": "Continue",
          "description": "Whether the next task should be executed, in case this wokflow/task fails."
        },
        "response": {
          "type": "string"
        }
      }
    },
    "retry": {
      "type": "object",
      "title": "Retry mechanism",
      "description": "Retry logic helps to handle transient failures, internal server errors, and network errors with support for constant, exponential and random types.\n`Currently applied only for com.gs.http workflow.`",
      "properties": {
        "max_attempts": {
          "type": "number",
          "default": 5
        },
        "type": {
          "type": "string",
          "enum": ["constant", "exponential", "random"],
          "default": "constant"
        },
        "interval": {
          "type": "string",
          "title": "Interval",
          "default": "PT15S"
        },
        "min_interval": {
          "title": "Min interval",
          "type": "string"
        },
        "max_interval": {
          "title": "Max interval",
          "type": "string"
        }
      },
      "required": ["type", "interval"]
    },
    "com-gs-http": {
      "type": "object",
      "required": ["args"],
      "properties": {
        "params": {
          "type": ["object", "string"]
        },
        "args": {
          "type": ["object", "string"],
          "title": "args",
          "required": ["datasource", "config"],
          "default": { "datasource": {}, "config": {} },
          "properties": {
            "datasource": {
              "type": "string"
            },
            "config": {
              "type": "object",
              "required": ["url", "method"],
              "properties": {
                "url": {
                  "type": "string"
                },
                "method": {
                  "type": "string",
                  "enum": ["get", "put", "post", "delete", "options"]
                }
              }
            }
          }
        },
        "retry": {
          "$ref": "#/definitions/retry"
        }
      }
    },
    "com-gs-return": {
      "title": "args",
      "description": "Can be template string with `js` or an `object`",
      "properties": {
        "args": {
          "type": ["object", "string"],
          "default": "<% %>"
        }
      },
      "required": ["args"]
    },
    "com-gs-log": {
      "title": "args",
      "description": "Can be template string with `js` or an `object`",
      "properties": {
        "args": {
          "type": ["object", "string"],
          "properties": {
            "level": {
              "type": "string",
              "title": "Log level",
              "enum": [
                "info",
                "debug",
                "error",
                "warn",
                "fatal",
                "silent",
                "trace"
              ],
              "default": "debug"
            },
            "data": {
              "type": ["string", "object"],
              "default": "<% %>"
            }
          }
        }
      },
      "required": ["args"]
    },
    "com-gs-transform": {
      "title": "args",
      "properties": {
        "args": {
          "type": ["object", "string"],
          "properties": {
            "data": {
              "title": "data",
              "type": ["object", "string"],
              "default": ""
            }
          }
        }
      },
      "required": ["args"]
    },
    "com-gs-series-and-parallel": {
      "properties": {
        "tasks": {
          "$ref": "#/definitions/tasks"
        }
      },
      "required": ["tasks"]
    },
    "com-gs-switch": {
      "properties": {
        "value": {
          "type": ["string"]
        },
        "cases": {
          "type": "object"
        }
      },
      "required": ["cases"]
    },
    "com-gs-each_sequential_and_parallel": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "type": ["number", "string", "object"]
          },
          "minItems": 1,
          "default": []
        },
        "tasks": {
          "$ref": "#/definitions/tasks"
        }
      },
      "required": ["value", "tasks"]
    },
    "com-gs-if-elif": {
      "type": "object",
      "properties": {
        "condition": {
          "type": "string",
          "default": ""
        },
        "tasks": {
          "$ref": "#/definitions/tasks"
        }
      },
      "required": ["condition", "tasks"]
    },
    "com-gs-else": {
      "type": "object",
      "properties": {
        "tasks": {
          "$ref": "#/definitions/tasks"
        }
      },
      "required": ["tasks"]
    },
    "com-gs-redis": {
      "type": "object",
      "required": ["args"],
      "properties": {
        "args": {
          "type": "object",
          "properties": {
            "config": {
              "type": "object",
              "properties": {
                "method": {
                  "type": "string"
                }
              },
              "required": ["method"]
            },
            "data": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string",
                  "default": ""
                },
                "value": {
                  "type": "string",
                  "default": ""
                }
              },
              "required": ["key"]
            }
          },
          "required": ["config", "data"]
        }
      }
    },
    "com-gs-datastore": {
      "type": "object",
      "properties": {
        "args": {
          "type": "object",
          "title": "args",
          "required": ["datasource", "config"],
          "properties": {
            "datasource": {
              "title": "datasource",
              "description": "datasource name defined in `datasources`.",
              "type": "string"
            },
            "data": {
              "title": "data",
              "description": "It can be `object` either `template string`",
              "type": ["object", "string"]
            },
            "config": {
              "title": "config",
              "type": "object",
              "required": ["method"],
              "properties": {
                "method": {
                  "title": "method",
                  "type": "string",
                  "default": ""
                }
              }
            }
          }
        }
      },
      "required": ["args"]
    }
  }
}